name: Check SDK Sync

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  check-sync:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      statuses: write
      checks: write
      issues: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          path: 'src'
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Compare SDK source and UPM copy
        id: check
        continue-on-error: true  # Continue even if this step fails
        run: |
          echo "Checking if src/UnityDevProject/Assets/TPromise and src/upm/com.metaversemagna.tpromise are in sync..."
          
          cd src
          
          # Write initial sync status
          echo "checking" > ../sync_status.txt
          
          python3 <<EOF
          import os
          import sys

          def walk_files(base):
              if not os.path.exists(base):
                  return []
              return sorted([
                  os.path.relpath(os.path.join(root, f), base)
                  for root, _, files in os.walk(base)
                  for f in files
                  if not f.endswith('.meta')
              ])

          def files_equal(f1, f2):
              try:
                  with open(f1, 'rb') as file1, open(f2, 'rb') as file2:
                      return file1.read() == file2.read()
              except Exception as e:
                  print(f'Error comparing files: {e}')
                  return False

          src = 'UnityDevProject/Assets/TPromise'
          dst = 'upm/com.metaversemagna.tpromise'
          out_of_sync = False

          # Check if directories exist
          if not os.path.exists(src):
              print(f'Error: Source directory {src} does not exist')
              sys.exit(1)

          if not os.path.exists(dst):
              print(f'Error: Destination directory {dst} does not exist')
              sys.exit(1)

          src_files = walk_files(src)
          dst_files = walk_files(dst)

          # Check for missing files
          if len(src_files) != len(dst_files):
              print(f'File count mismatch: Source has {len(src_files)} files, Destination has {len(dst_files)} files')
              out_of_sync = True

          # Compare files
          for rel_path in src_files:
              full_src = os.path.join(src, rel_path)
              full_dst = os.path.join(dst, rel_path)
              
              if not os.path.exists(full_dst):
                  print(f'Missing in destination: {rel_path}')
                  out_of_sync = True
                  break
                  
              if not files_equal(full_src, full_dst):
                  print(f'Content mismatch: {rel_path}')
                  out_of_sync = True
                  break

          # Write result
          with open('../sync_status.txt', 'w') as f:
              f.write('out_of_sync' if out_of_sync else 'in_sync')
          EOF

          # Capture the Python exit code
          python_exit_code=$?
          if [ $python_exit_code -ne 0 ]; then
            echo "out_of_sync" > ../sync_status.txt
          fi
          exit 0  # Always exit successfully from the step

      - name: Set status output
        id: result
        run: |
          echo "sync_status=$(cat src/sync_status.txt)" >> $GITHUB_OUTPUT
          echo "Python exit code: ${{ steps.check.outcome }}"

      - name: Create Sync Check
        uses: actions/github-script@v7
        with:
          script: |
            const status = "${{ steps.result.outputs.sync_status }}";
            const conclusion = status === 'in_sync' ? 'success' : 'failure';
            
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'UPM Sync Check',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: conclusion,
              output: {
                title: status === 'in_sync' ? 'UPM In Sync' : 'UPM Out of Sync',
                summary: status === 'in_sync' 
                  ? 'All UPM package files are properly synced' 
                  : 'UPM package files are not in sync with source',
                text: status === 'in_sync'
                  ? '✅ All files are synchronized between source and UPM package'
                  : '⚠️ Please run **TPromise > Sync to UPM** in Unity and commit the changes'
              }
            });

      - name: Update PR title with sync badge
        uses: actions/github-script@v7
        with:
          script: |
            const status = "${{ steps.result.outputs.sync_status }}";
            const title = context.payload.pull_request.title;
            const newPrefix = status === 'in_sync' ? '[UPM SYNC ✅]' : '[UPM OUT-OF-SYNC ❌]';
            const updatedTitle = title.replace(/\[UPM SYNC.*?\]\s*/g, '');
            const finalTitle = `${newPrefix} ${updatedTitle}`;

            if (finalTitle !== title) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                title: finalTitle
              });
            }

      - name: Post or update sync comment
        if: steps.result.outputs.sync_status == 'out_of_sync'
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const syncComment = comments.data.find(c => 
              c.body.includes('**UPM Sync Required**')
            );

            const commentBody = `⚠️ **UPM Sync Required**\n\n` +
              `The UPM package is out of sync with the source files.\n\n` +
              `Please run **TPromise > Sync to UPM** in Unity and commit the changes.\n\n` +
              `*This PR cannot be merged until UPM package is in sync*`;

            if (syncComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: syncComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            }

      - name: Delete sync comment if resolved
        if: steps.result.outputs.sync_status == 'in_sync'
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const syncComments = comments.data.filter(c =>
              c.body && c.body.includes('**UPM Sync Required**')
            );

            for (const comment of syncComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }