name: Check SDK Sync

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  check-sync:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      statuses: write
      checks: write
      issues: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          path: 'src'
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Compare SDK source and UPM copy
        id: check
        run: |
          echo "Checking if src/UnityDevProject/Assets/TPromise and src/upm/com.metaversemagna.tpromise are in sync..."
          
          # Create workspace directory if it doesn't exist
          mkdir -p workspace
          
          cd src
          
          python3 <<EOF
          import os
          import sys
          from pathlib import Path

          def debug_print(*args):
              print(*args, file=sys.stderr)

          def walk_files(base):
              if not os.path.exists(base):
                  debug_print(f"Directory does not exist: {base}")
                  return []
              files = []
              for root, _, filenames in os.walk(base):
                  for f in filenames:
                      if f.endswith('.meta'):
                          continue
                      full_path = os.path.join(root, f)
                      rel_path = os.path.relpath(full_path, base)
                      files.append(rel_path)
              return sorted(files)

          def files_equal(f1, f2):
              try:
                  # Compare binary content
                  with open(f1, 'rb') as file1, open(f2, 'rb') as file2:
                      return file1.read() == file2.read()
              except Exception as e:
                  debug_print(f"Error comparing {f1} and {f2}: {str(e)}")
                  return False

          src = 'UnityDevProject/Assets/TPromise'
          dst = 'upm/com.metaversemagna.tpromise'
          out_of_sync = False

          debug_print("=== Starting Sync Check ===")
          debug_print(f"Source: {src}")
          debug_print(f"Destination: {dst}")

          # Check if directories exist
          if not os.path.exists(src):
              debug_print(f"Error: Source directory {src} does not exist")
              with open('../workspace/sync_status.txt', 'w') as f:
                  f.write('error')
              sys.exit(1)

          if not os.path.exists(dst):
              debug_print(f"Error: Destination directory {dst} does not exist")
              with open('../workspace/sync_status.txt', 'w') as f:
                  f.write('error')
              sys.exit(1)

          src_files = walk_files(src)
          dst_files = walk_files(dst)

          debug_print(f"\nSource files ({len(src_files)}):")
          debug_print("\n".join(src_files[:10]) + ("\n..." if len(src_files) > 10 else ""))
          
          debug_print(f"\nDestination files ({len(dst_files)}):")
          debug_print("\n".join(dst_files[:10]) + ("\n..." if len(dst_files) > 10 else ""))

          # Check for missing files
          if len(src_files) != len(dst_files):
              debug_print(f"\nFile count mismatch: Source {len(src_files)} vs Destination {len(dst_files)}")
              out_of_sync = True
          else:
              debug_print("\nFile counts match")

          # Compare files
          if not out_of_sync:
              for rel_path in src_files:
                  full_src = os.path.join(src, rel_path)
                  full_dst = os.path.join(dst, rel_path)
                  
                  if not os.path.exists(full_dst):
                      debug_print(f"\nMissing in destination: {rel_path}")
                      out_of_sync = True
                      break
                      
                  if not files_equal(full_src, full_dst):
                      debug_print(f"\nContent mismatch: {rel_path}")
                      out_of_sync = True
                      break

          debug_print("\n=== Final Result ===")
          debug_print("Out of sync:" if out_of_sync else "In sync")
          
          # Write result to workspace directory
          with open('../workspace/sync_status.txt', 'w') as f:
              f.write('out_of_sync' if out_of_sync else 'in_sync')
          EOF

      - name: Set status output
        id: result
        run: |
          echo "Reading sync status..."
          if [ -f "workspace/sync_status.txt" ]; then
            SYNC_STATUS=$(cat workspace/sync_status.txt)
            echo "sync_status=${SYNC_STATUS}" >> $GITHUB_OUTPUT
            echo "status=${SYNC_STATUS}" >> $GITHUB_ENV
            echo "Sync status: ${SYNC_STATUS}"
          else
            echo "sync_status=error" >> $GITHUB_OUTPUT
            echo "status=error" >> $GITHUB_ENV
            echo "Error: sync_status.txt not found"
          fi

      - name: Create Status Check
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.status;
            const conclusion = status === 'in_sync' ? 'success' : (status === 'error' ? 'failure' : 'failure');
            
            // Create commit status
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: conclusion,
              context: 'UPM Sync',
              description: status === 'in_sync' 
                ? 'UPM package is synced' 
                : status === 'error' 
                  ? 'Error checking sync status' 
                  : 'UPM package is out of sync',
            });

      - name: Update PR title
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.status;
            const title = context.payload.pull_request.title;
            
            // Remove all existing sync tags
            const cleanedTitle = title
              .replace(/^\[UPM (SYNC|OUT-OF-SYNC)[^\]]*\][\s-]*/g, '')
              .replace(/^\[SYNC[^\]]*\][\s-]*/g, '')
              .trim();
            
            const newPrefix = status === 'in_sync' 
              ? '[UPM SYNCED ✅]' 
              : status === 'error'
                ? '[SYNC ERROR ❗]'
                : '[UPM OUT-OF-SYNC ❌]';
            
            const finalTitle = `${newPrefix} ${cleanedTitle}`;

            if (finalTitle !== title) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                title: finalTitle
              });
            }

      - name: Post sync status
        if: env.status != 'in_sync'
        uses: actions/github-script@v7
        with:
          script: |
            const status = process.env.status;
            let commentBody;
            
            if (status === 'error') {
              commentBody = `❗ **Sync Check Error**\n\n` +
                `There was an error verifying the UPM sync status.\n\n` +
                `Please check the workflow logs for details.`;
            } else {
              commentBody = `⚠️ **UPM Sync Required**\n\n` +
                `The UPM package is out of sync with source files.\n\n` +
                `**Required Action:**\n` +
                `1. Open Unity project\n` +
                `2. Go to **TPromise > Sync to UPM**\n` +
                `3. Commit and push all changes\n\n` +
                `🔒 *This PR cannot be merged until sync is complete*`;
            }
            
            // Delete any existing sync comments first
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const syncComments = comments.data.filter(c =>
              c.body && (c.body.includes('**UPM Sync Required**') || c.body.includes('**Sync Check Error**'))
            );
            
            for (const comment of syncComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }
            
            // Post new comment
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });