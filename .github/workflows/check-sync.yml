name: Check SDK Sync

on:
  pull_request:
    branches: [main]

jobs:
  check-sync:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
      issues: write

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Compare SDK source and UPM copy
        id: check
        run: |
          echo "Checking if Assets/TPromise and UPM are in sync..."
          
          python3 -c "
import os
import sys

def walk_files(base):
    if not os.path.exists(base):
        return []
    return sorted([
        os.path.relpath(os.path.join(root, f), base)
        for root, _, files in os.walk(base)
        for f in files
        if not f.endswith('.meta')
    ])

def files_equal(f1, f2):
    try:
        with open(f1, 'rb') as file1, open(f2, 'rb') as file2:
            return file1.read() == file2.read()
    except Exception as e:
        print(f'Error comparing files: {e}')
        return False

src = 'Assets/TPromise'
dst = 'upm/com.metaversemagna.tpromise'
out_of_sync = False

# Check if directories exist
if not os.path.exists(src):
    print(f'Error: Source directory {src} does not exist')
    sys.exit(1)

if not os.path.exists(dst):
    print(f'Error: Destination directory {dst} does not exist')
    sys.exit(1)

src_files = walk_files(src)
dst_files = walk_files(dst)

# Check for missing files
if len(src_files) != len(dst_files):
    print(f'File count mismatch: Source has {len(src_files)} files, Destination has {len(dst_files)} files')
    out_of_sync = True

# Compare files
for rel_path in src_files:
    full_src = os.path.join(src, rel_path)
    full_dst = os.path.join(dst, rel_path)
    
    if not os.path.exists(full_dst):
        print(f'Missing in destination: {rel_path}')
        out_of_sync = True
        break
        
    if not files_equal(full_src, full_dst):
        print(f'Content mismatch: {rel_path}')
        out_of_sync = True
        break

# Write result
with open('sync_status.txt', 'w') as f:
    f.write('out_of_sync' if out_of_sync else 'in_sync')

sys.exit(1 if out_of_sync else 0)
"

      - name: Set status output
        id: result
        run: echo "sync_status=$(cat sync_status.txt)" >> $GITHUB_OUTPUT

      - name: Update PR title with sync badge
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;
            const status = "${{ steps.result.outputs.sync_status }}";
            const newPrefix = status === 'in_sync' ? '[SYNC OK ✅]' : '[SYNC ❌]';
            const updatedTitle = title.replace(/\[SYNC.*?\]\s*/g, '');
            const finalTitle = `${newPrefix} ${updatedTitle}`;

            if (finalTitle !== title) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                title: finalTitle
              });
            }

      - name: Post comment if out of sync
        if: steps.result.outputs.sync_status == 'out_of_sync'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `⚠️ **HyperSDK Sync Required**

Please run **HyperSDK > Sync to UPM** in Unity to sync the SDK.

Once synced, commit and push the changes to resolve this issue.`
            });

      - name: Delete sync comment if resolved
        if: steps.result.outputs.sync_status == 'in_sync'
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            const syncComments = comments.data.filter(c =>
              c.body && c.body.includes('**HyperSDK Sync Required**')
            );

            for (const comment of syncComments) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: comment.id
              });
            }